  Warning: FormalParameters is deletable
  Warning: Arguments is deletable

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true,
  16 	cod     = false;
  17 
  18   const bool
  19     known = true;
  20 
  21   // This next method might better be located in the code generator.  Traditionally
  22   // it has been left in the ATG file, but that might change in future years
  23   //
  24   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  25   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  26   // to know this!
  27 
  28   static string Unescape(string s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.Length) {
  33       if (s[i] == '\\') {
  34         switch (s[i+1]) {
  35           case '\\': buf.Append('\\'); break;
  36           case '\'': buf.Append('\''); break;
  37           case '\"': buf.Append('\"'); break;
  38           case  'r': buf.Append('\r'); break;
  39           case  'n': buf.Append('\n'); break;
  40           case  't': buf.Append('\t'); break;
  41           case  'b': buf.Append('\b'); break;
  42           case  'f': buf.Append('\f'); break;
  43           default:   buf.Append(s[i+1]); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.Append(s[i]);
  49         i++;
  50       }
  51     }
  52     return buf.ToString();
  53   } // Unescape
  54 
  55   // the following is global for expediency (fewer parameters needed)
  56 
  57   static Label mainEntryPoint = new Label(!known);
  58 
  59   static bool IsArith(int type) {
  60     return type == Types.intType || type == Types.noType;
  61   } // IsArith
  62 
  63   static bool IsBool(int type) {
  64     return type == Types.boolType || type == Types.noType;
  65   } // IsBool
  66 
  67   static bool IsArray(int type) {
  68     return (type % 2) == 1;
  69   } // IsArray
  70 
  71   static bool Compatible(int typeOne, int typeTwo) {
  72   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  73     return    typeOne == typeTwo
  74            || IsArith(typeOne) && IsArith(typeTwo)
  75            || typeOne == Types.noType
  76            || typeTwo == Types.noType
  77            || IsArray(typeOne) && typeTwo == Types.nullType
  78            || IsArray(typeTwo) && typeOne == Types.nullType;
  79   } // Compatible
  80 
  81   static bool Assignable(int typeOne, int typeTwo) {
  82   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  83     return    typeOne == typeTwo
  84            || typeOne == Types.noType
  85            || typeTwo == Types.noType
  86            || IsArray(typeOne) && typeTwo == Types.nullType;
  87   } // Assignable
  88 
  89   static bool IsCall(out DesType des) {
  90   // Used as an LL(1) conflict resolver variable/function name
  91     Entry entry = Table.Find(la.val);
  92     des = new DesType(entry);
  93     return entry.kind == Kinds.Fun;
  94   } // IsCall
  95 
  96 
  97 /* -------------------------------------------------------------------------- */
  98 
  99 CHARACTERS
 100   lf         = CHR(10) .
 101   backslash  = CHR(92) .
 102   control    = CHR(0) .. CHR(31) .
 103   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 104   digit      = "0123456789" .
 105   stringCh   = ANY - '"' - control - backslash .
 106   charCh     = ANY - "'" - control - backslash .
 107   printable  = ANY - control .
 108 
 109 TOKENS
 110   identifier = letter { { "_" } (letter | digit) } .
 111   number     = digit { digit } .
 112   stringLit  = '"' { stringCh | backslash printable } '"' .
 113   charLit    = "'" ( charCh   | backslash printable ) "'" .
 114 
 115 PRAGMAS
 116   DebugOn     = "$D+" .                      (. debug = true; .)
 117   DebugOff    = "$D-" .                      (. debug = false; .)
 118   StackDump   = "$SD" .                      (. if(debug) CodeGen.Stack(); .)
 119   HeapDump    = "$HD" .                      (. if(debug) CodeGen.Heap(); .)
 120   TableDump   = "$ST" .                      (. if(debug) Table.PrintTable(OutFile.StdOut); .)
 121   codon   	  = "$C+"  .                     (. cod = true; .)
 122   codoff   	  = "$C-"  .                     (. cod = false; .)
 123 
 124 COMMENTS FROM "//" TO lf
 125 COMMENTS FROM "/*" TO "*/"
 126 
 127 IGNORE CHR(9) .. CHR(13)
 128 
 129 PRODUCTIONS
 130 
 131   Parva
 132                              (. CodeGen.FrameHeader();
 133 					     // no arguments
 134                                 CodeGen.Call(mainEntryPoint);
 135 						// forward, incomplete
 136                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 137   = {   FuncDeclaration } EOF  (. if 
 138 						(!mainEntryPoint.IsDefined())
 139                          SemError("missing Main function"); .)
 140   .
 141 
 142   FuncDeclaration
 143                        (. StackFrame frame = new StackFrame();
 144                           Entry function = new Entry(); .)
 145   =  "void" Ident<out function.name>  
 146 					(. function.kind = Kinds.Fun;
 147                               function.type = Types.voidType;
 148                               function.nParams = 0;
 149                               function.firstParam = null;
 150 	                  function.entryPoint = new Label(known);
 151                               Table.Insert(function);
 152                               Table.OpenScope(); .)
 153      "(" FormalParameters<function> ")"      
 154 				(. frame.size = CodeGen.headerSize + 
 155 					function.nParams;
 156                    if (function.name.ToUpper().Equals("MAIN")
 157                        && !mainEntryPoint.IsDefined()
 158                        && function.nParams == 0) {
 159                            mainEntryPoint.Here(); } .)
 160      Body<frame>              (. Table.CloseScope(); .)
 161   .
 162 
 163   FormalParameters<Entry func>  (. Entry param; .)
 164   = [ OneParam<out param, func> (. func.firstParam = param; .)
 165       { WEAK "," OneParam<out param, func> }
 166     ] .
 167 
 168   OneParam<out Entry param, Entry func>
 169 					(. param = new Entry();
 170                              param.kind = Kinds.Var;
 171            param.offset = CodeGen.headerSize + func.nParams;
 172                              func.nParams++; .)
 173   =  Type<out param.type>
 174      Ident<out param.name>         (. Table.Insert(param); .)
 175   .
 176 
 177   Body<StackFrame frame>       (. Label DSPLabel = new Label(known);
 178                                                 int sizeMark = frame.size;
 179                                                 CodeGen.OpenStackFrame(0); .)
 180   =  "{" { Statement<frame> }
 181      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 182                                                 CodeGen.LeaveVoidFunction();
 183                                               .) 
 184 .
 185 
 186   Statement<StackFrame frame>
 187   =  SYNC (   Block<frame>
 188             | ConstDeclarations
 189             | VarDeclarations<frame>
 190             | AssignmentOrCall
 191             | IfStatement<frame>
 192             | WhileStatement<frame>
 193             | HaltStatement
 194             | ReturnStatement
 195             | ReadStatement
 196             | WriteStatement
 197             | ";"
 198           ) .
 199 
 200   Block<StackFrame frame>
 201   =                                          (. Table.OpenScope(); .)
 202      "{" { Statement<frame> }
 203      WEAK "}"                                (. Table.CloseScope(); .)
 204   .
 205 
 206   ConstDeclarations
 207   = "const" OneConst { WEAK "," OneConst }
 208     WEAK ";"
 209   .
 210 
 211   OneConst                                   (. Entry constant = new Entry();
 212                                                 ConstRec con; .)
 213   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 214      AssignOp Constant<out con>              (. constant.value = con.value;
 215                                                 constant.type = con.type;
 216                                                 Table.Insert(constant); .)
 217   .
 218 
 219   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 220   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 221     | CharConst<out con.value>               (. con.type = Types.intType; .)
 222     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 223     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 224     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 225   .
 226 
 227   VarDeclarations<StackFrame frame>          (. int type; .)
 228   =  Type<out type>                          
 229      VarList<frame, type>
 230      WEAK ";"
 231   .
 232 
 233   Type<out int type>                         
 234   =   BasicType<out type>
 235        [ "[]"                                (. type++; .)
 236        ] .
 237 
 238   BasicType<out int type>                    (. type = Types.noType; .)
 239   =   "int"                                  (. type = Types.intType; .)
 240     | "bool"                                 (. type = Types.boolType; .)
 241   .
 242 
 243 
 244   VarList<StackFrame frame, int type>
 245   =  OneVar<frame, type>
 246      { WEAK "," OneVar<frame, type> }
 247   .
 248 
 249   OneVar<StackFrame frame, int type>         (. int expType;
 250                                                 Entry var = new Entry(); .)
 251   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 252                                                 var.type = type;
 253                                                 var.offset = frame.size;
 254                                                 frame.size++; .)
 255      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 256        Expression<out expType>               (. if (!Assignable(var.type, expType))
 257                                                   SemError("incompatible types in assignment");
 258                                                 CodeGen.Assign(var.type); .)
 259      ]                                       (. Table.Insert(var); .)
 260   .
 261 
 262 
 263   AssignmentOrCall                           (. int expType;
 264                                                 DesType des; .)
 265   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 266          identifier                          (. CodeGen.FrameHeader(); .)
 267          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 268       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 269                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 270          AssignOp
 271          Expression<out expType>             (. if (!Assignable(des.type, expType))
 272                                                 SemError("incompatible types in assignment");
 273                                                 CodeGen.Assign(des.type); .)
 274      ) WEAK ";"
 275   .
 276 
 277   Arguments<DesType des>                     (. int argCount = 0;
 278                                                 Entry fp = des.entry.firstParam; .)
 279   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 280        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 281        }
 282      ]                                       (. if (argCount != des.entry.nParams)
 283                                                   SemError("wrong number of arguments"); .)
 284   .
 285 
 286   OneArg<Entry fp>                           (. int argType; .)
 287   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 288                                                     SemError("argument type mismatch"); .)
 289      )
 290   .
 291 
 292   Designator<out DesType des>                (. string name;
 293                                                 int indexType; .)
 294   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 295                                                 if (!entry.declared)
 296                                                   SemError("undeclared identifier");
 297                                                 des = new DesType(entry);
 298                                                 if (entry.kind == Kinds.Var)
 299                                                   CodeGen.LoadAddress(entry); .)
 300      [     "["                               (. if (IsArray(des.type)) des.type--;
 301                                                 else SemError("unexpected subscript");
 302                                                 if (des.entry.kind != Kinds.Var)
 303                                                   SemError("unexpected subscript");
 304                                                 CodeGen.Dereference(); .)
 305               Expression<out indexType>      (. if (!IsArith(indexType))
 306                                                   SemError("invalid subscript type");
 307                                                 CodeGen.Index(); .)
 308 
 309            "]"
 310      ]
 311   .
 312 
 313   IfStatement<StackFrame frame>
 314                                              (. Label falseLabel = new Label(!known); .)
 315   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 316         Statement<frame>           (. falseLabel.Here(); .)
 317   .
 318 
 319 
 320   WhileStatement<StackFrame frame>
 321                                              (. Label loopExit  = new Label(!known);
 322                                                 Label loopStart = new Label(known); .)
 323   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 324      Statement<frame>              	     (. CodeGen.Branch(loopStart);
 325                                                 loopExit.Here(); .)
 326   .
 327 
 328   HaltStatement
 329   =  "halt"                                  (.  CodeGen.LeaveProgram(); .)
 330      WEAK ";"
 331   .
 332 
 333   ReturnStatement              
 334   =  "return"				(. CodeGen.LeaveVoidFunction(); .)
 335     WEAK ";"
 336   .
 337 
 338   ReadStatement
 339   = (   "read"     "("   ReadList   ")"
 340       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 341     )
 342     WEAK ";"
 343   .
 344 
 345   ReadList
 346   = ReadElement { WEAK "," ReadElement }
 347   .
 348 
 349   ReadElement                                (. string str;
 350                                                 DesType des; .)
 351   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 352     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 353                                                   SemError("wrong kind of identifier");
 354                                                 switch (des.type) {
 355                                                   case Types.intType:
 356                                                   case Types.boolType:
 357                                                     CodeGen.Read(des.type); break;
 358                                                   default:
 359                                                     SemError("cannot read this type"); break;
 360                                                 } .)
 361   .
 362 
 363   WriteStatement
 364   = (   "write"     "("   WriteList   ")"
 365       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 366     )
 367     WEAK ";"
 368   .
 369 
 370   WriteList
 371   = WriteElement { WEAK "," WriteElement }
 372   .
 373 
 374   WriteElement                               (. int expType;
 375                                                 string str; .)
 376   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 377     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType))
 378                                                   SemError("cannot write this type");
 379                                                 switch (expType) {
 380                                                   case Types.intType:
 381                                                   case Types.boolType:
 382                                                     CodeGen.Write(expType); break;
 383                                                   default:
 384                                                     break;
 385                                                 } .)
 386   .
 387 
 388   Condition                                  (. int type; .)
 389   =  Expression<out type>                    (. if (!IsBool(type))
 390                                                   SemError("Boolean expression needed"); .)
 391   .
 392 
 393   Expression<out int type>                   (. int type2;
 394                                                 int op;
 395                                                 bool comparable; .)
 396   =  AddExp<out type>
 397      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 398                                                   case CodeGen.ceq: case CodeGen.cne:
 399                                                     comparable = Compatible(type, type2);
 400                                                     break;
 401                                                   default:
 402                                                     comparable = IsArith(type) && IsArith(type2);
 403                                                     break;
 404                                                 }
 405                                                 if (!comparable)
 406                                                   SemError("incomparable operands");
 407                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 408      ]
 409   .
 410 
 411   AddExp<out int type>                       (. int type2;
 412                                                 int op;
 413                                                 Label shortcircuit = new Label(!known); .)
 414   =                                          (. type = Types.noType; .)
 415      (   "+" Term<out type>                  (. if (!IsArith(type))
 416                                                   SemError("arithmetic operand needed"); .)
 417        | "-" Term<out type>                  (. if (!IsArith(type))
 418                                                   SemError("arithmetic operand needed");
 419                                                 CodeGen.NegateInteger(); .)
 420        | Term<out type>
 421      )
 422      { AddOp<out op>                         (. if (op == CodeGen.or)
 423                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 424        Term<out type2>                       (. switch (op) {
 425                                                   case CodeGen.or:
 426                                                     if (!IsBool(type) || !IsBool(type2))
 427                                                       SemError("boolean operands needed");
 428                                                     type = Types.boolType;
 429                                                     break;
 430                                                   default:
 431                                                     if (!IsArith(type) || !IsArith(type2)) {
 432                                                       SemError("arithmetic operands needed");
 433                                                       type = Types.noType;
 434                                                     }
 435                                                     CodeGen.BinaryOp(op);
 436                                                     break;
 437                                                 } .)
 438      }                                       (. shortcircuit.Here(); .)
 439   .
 440 
 441   Term<out int type>                         (. int type2;
 442                                                 int op;
 443                                                 Label shortcircuit = new Label(!known); .)
 444   =  Factor<out type>
 445      { MulOp<out op>                         (. if (op == CodeGen.and)
 446                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 447        Factor<out type2>                     (. switch (op) {
 448                                                   case CodeGen.and:
 449                                                     if (!IsBool(type) || !IsBool(type2))
 450                                                       SemError("boolean operands needed");
 451                                                     type = Types.boolType;
 452                                                     break;
 453                                                   default:
 454                                                     if (!IsArith(type) || !IsArith(type2)) {
 455                                                       SemError("arithmetic operands needed");
 456                                                       type = Types.noType;
 457                                                     }
 458                                                     CodeGen.BinaryOp(op);
 459                                                     break;
 460                                                 } .)
 461      }                                       (. shortcircuit.Here(); .)
 462   .
 463 
 464   Factor<out int type>                       (. type = Types.noType;
 465                                                 int size;
 466                                                 DesType des;
 467                                                 ConstRec con; .)
 468   =    Designator<out des>                 (. type = des.type;
 469                                               switch (des.entry.kind) {
 470                                                   case Kinds.Var:
 471                                                     CodeGen.Dereference();
 472                                                     break;
 473                                                   case Kinds.Con:
 474                                                     CodeGen.LoadConstant(des.entry.value);
 475                                                     break;
 476                                                   default:
 477                                                     SemError("wrong kind of identifier");
 478                                                     break;
 479                                                 } .)
 480                                         
 481      | Constant<out con>                     (. type = con.type;
 482                                                 CodeGen.LoadConstant(con.value); .)
 483      | "new" BasicType<out type>             (. type++; .)
 484          "[" Expression<out size>            (. if (!IsArith(size))
 485                                                   SemError("array size must be integer");
 486                                                 CodeGen.Allocate(); .)
 487          "]"
 488      | "!" Factor<out type>                  (. if (!IsBool(type)) SemError("boolean operand needed");
 489                                                 else CodeGen.NegateBoolean();
 490                                                 type = Types.boolType; .)
 491      | "(" Expression<out type> ")"
 492   .
 493 
 494   AddOp<out int op>                          (. op = CodeGen.nop; .)
 495   =    "+"                                   (. op = CodeGen.add; .)
 496      | "-"                                   (. op = CodeGen.sub; .)
 497      | "||"                                  (. op = CodeGen.or;  .)
 498   .
 499 
 500   MulOp<out int op>                          (. op = CodeGen.nop; .)
 501   =    "*"                                   (. op = CodeGen.mul; .)
 502      | "/"                                   (. op = CodeGen.div; .)
 503      | "%"                                   (. op = CodeGen.rem; .)
 504      | "&&"                                  (. op = CodeGen.and; .)
 505   .
 506 
 507   RelOp<out int op>                          (. op = CodeGen.nop; .)
 508   =    "=="                                  (. op = CodeGen.ceq; .)
 509      | "!="                                  (. op = CodeGen.cne; .)
 510      | "<"                                   (. op = CodeGen.clt; .)
 511      | "<="                                  (. op = CodeGen.cle; .)
 512      | ">"                                   (. op = CodeGen.cgt; .)
 513      | ">="                                  (. op = CodeGen.cge; .)
 514   .
 515 
 516   AssignOp = "=" .
 517 
 518   Ident<out string name>
 519   =  identifier                              (. name = token.val; .)
 520   .
 521 
 522   StringConst<out string str>
 523   =  stringLit                               (. str = token.val;
 524                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 525   .
 526 
 527   CharConst<out int value>
 528   =  charLit                                 (. string str = token.val;
 529                                                 str = Unescape(str.Substring(1, str.Length - 2));
 530                                                 value = str[0]; .)
 531   .
 532 
 533   IntConst<out int value>
 534   =  number                                  (. try {
 535                                                   value = Convert.ToInt32(token.val);
 536                                                 } catch (Exception) {
 537                                                   value = 0; SemError("number out of range");
 538                                                 } .)
 539   .
 540 
 541 END Parva.
 542 

0 errors detected
2 warnings detected
