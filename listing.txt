  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in WriteStatement: "+" is the start & successor of a deletable structure
  LL1 warning in AddExp: "+" is the start & successor of a deletable structure
  LL1 warning in AddExp: "-" is the start & successor of a deletable structure

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true,
  16 	cod     = false,
  17 	loop    = false;
  18    static Label stoplabel = new Label(!known);
  19 
  20   const bool
  21     known = true;
  22   // This next method might better be located in the code generator.  Traditionally
  23   // it has been left in the ATG file, but that might change in future years
  24   //
  25   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  26   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  27   // to know this!
  28 
  29   static string Unescape(string s) {
  30   /* Replaces escape sequences in s by their Unicode values */
  31     StringBuilder buf = new StringBuilder();
  32     int i = 0;
  33     while (i < s.Length) {
  34       if (s[i] == '\\') {
  35         switch (s[i+1]) {
  36           case '\\': buf.Append('\\'); break;
  37           case '\'': buf.Append('\''); break;
  38           case '\"': buf.Append('\"'); break;
  39           case  'r': buf.Append('\r'); break;
  40           case  'n': buf.Append('\n'); break;
  41           case  't': buf.Append('\t'); break;
  42           case  'b': buf.Append('\b'); break;
  43           case  'f': buf.Append('\f'); break;
  44           default:   buf.Append(s[i+1]); break;
  45         }
  46         i += 2;
  47       }
  48       else {
  49         buf.Append(s[i]);
  50         i++;
  51       }
  52     }
  53     return buf.ToString();
  54   } // Unescape
  55 
  56   // the following is global for expediency (fewer parameters needed)
  57 
  58   static Label mainEntryPoint = new Label(!known);
  59 
  60   static bool IsArith(int type) {
  61     return type == Types.intType || type == Types.noType;
  62   } // IsArith
  63 
  64   static bool IsBool(int type) {
  65     return type == Types.boolType || type == Types.noType;
  66   } // IsBool
  67 
  68   static bool IsArray(int type) {
  69     return (type % 2) == 1;
  70   } // IsArray
  71 
  72   static bool Compatible(int typeOne, int typeTwo) {
  73   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  74     return    typeOne == typeTwo
  75            || IsArith(typeOne) && IsArith(typeTwo)
  76            || typeOne == Types.noType
  77            || typeTwo == Types.noType
  78            || IsArray(typeOne) && typeTwo == Types.nullType
  79            || IsArray(typeTwo) && typeOne == Types.nullType;
  80   } // Compatible
  81 
  82   static bool Assignable(int typeOne, int typeTwo) {
  83   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  84     return    typeOne == typeTwo
  85            || typeOne == Types.noType
  86            || typeTwo == Types.noType
  87            || IsArray(typeOne) && typeTwo == Types.nullType;
  88   } // Assignable
  89 
  90   static bool IsCall(out DesType des) {
  91   // Used as an LL(1) conflict resolver variable/function name
  92     Entry entry = Table.Find(la.val);
  93     des = new DesType(entry);
  94     return entry.kind == Kinds.Fun;
  95   } // IsCall
  96 
  97 
  98 /* -------------------------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   DebugOn     = "$D+" .                      (. debug = true; .)
 118   DebugOff    = "$D-" .                      (. debug = false; .)
 119   StackDump   = "$SD" .                      (. if(debug) CodeGen.Stack(); .)
 120   HeapDump    = "$HD" .                      (. if(debug) CodeGen.Heap(); .)
 121   TableDump   = "$ST" .                      (. if(debug) Table.PrintTable(OutFile.StdOut); .)
 122   codon   	  = "$C+"  .                     (. cod = true; .)
 123   codoff   	  = "$C-"  .                     (. cod = false; .)
 124   warningoff  = "$W-"  .                     (. warnings = false; .)  
 125 
 126 COMMENTS FROM "//" TO lf
 127 COMMENTS FROM "/*" TO "*/"
 128 
 129 IGNORE CHR(9) .. CHR(13)
 130 
 131 PRODUCTIONS
 132 
 133   Parva
 134                              (. CodeGen.FrameHeader();
 135 					     // no arguments
 136                                 CodeGen.Call(mainEntryPoint);
 137 						// forward, incomplete
 138                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 139   = {   FuncDeclaration } EOF  (. if 
 140 						(!mainEntryPoint.IsDefined())
 141                          SemError("missing Main function"); .)
 142   .
 143 
 144   FuncDeclaration
 145                        (. StackFrame frame = new StackFrame();
 146                           Entry function = new Entry(); .)
 147   =  "void" Ident<out function.name>  
 148 					(. function.kind = Kinds.Fun;
 149                               function.type = Types.voidType;
 150                               function.nParams = 0;
 151                               function.firstParam = null;
 152 	                  function.entryPoint = new Label(known);
 153                               Table.Insert(function);
 154                               Table.OpenScope(); .)
 155      "(" FormalParameters<function> ")"      
 156 				(. frame.size = CodeGen.headerSize + 
 157 					function.nParams;
 158                    if (function.name.ToUpper().Equals("MAIN")
 159                        && !mainEntryPoint.IsDefined()
 160                        && function.nParams == 0) {
 161                            mainEntryPoint.Here(); } .)
 162      Body<frame>              (. Table.CloseScope(); .)
 163   .
 164 
 165   FormalParameters<Entry func>  (. Entry param; .)
 166   = [ OneParam<out param, func> (. func.firstParam = param; .)
 167       { WEAK "," OneParam<out param, func> }
 168     ] .
 169 
 170   OneParam<out Entry param, Entry func>
 171 					(. param = new Entry();
 172                              param.kind = Kinds.Var;
 173            param.offset = CodeGen.headerSize + func.nParams;
 174                              func.nParams++; .)
 175   =  Type<out param.type>
 176      Ident<out param.name>         (. Table.Insert(param); .)
 177   .
 178 
 179   Body<StackFrame frame>       (. Label DSPLabel = new Label(known);
 180                                                 int sizeMark = frame.size;
 181                                                 CodeGen.OpenStackFrame(0); .)
 182   =  "{" { Statement<frame> }
 183      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 184                                                 CodeGen.LeaveVoidFunction();
 185                                               .) 
 186 .
 187 
 188   Statement<StackFrame frame>    (. Label loopstop = new Label(!known);.)
 189   =  SYNC (   Block<frame>
 190             | ConstDeclarations
 191             | VarDeclarations<frame>
 192             | AssignmentOrCall
 193             | IfStatement<frame>      (. stoplabel = new Label(!known);  .)
 194             | WhileStatement<frame>   (. stoplabel = new Label(!known); .)
 195 			| DoWhileStatement<frame> (. stoplabel = new Label(!known);  .)
 196             | ForStatement<frame>      (. stoplabel = new Label(!known);  .)
 197 			 
 198 			| HaltStatement
 199             | ReturnStatement
 200             | ReadStatement
 201             | WriteStatement
 202             |  ";"                              //(. if(empty) SemError("empty statement"); .) 
 203 			| "break" ";"                         (. if(loop) CodeGen.Branch(stoplabel); else SemError("break not expected"); .)
 204           ) .
 205 
 206   Block<StackFrame frame>
 207  (.bool empty = false; .) =                                          (. Table.OpenScope(); .)
 208    (. if (token.val == ";") Warning(" ; unexpected"); .) WEAK "{" { Statement<frame> } (. if (token.val == null) Warning("statement empty"); .)
 209      WEAK  "}"                                (. Table.CloseScope(); .)
 210   .
 211 
 212   ConstDeclarations
 213   = "const" OneConst { WEAK "," OneConst }
 214     WEAK ";"
 215   .
 216 
 217   OneConst                                   (. Entry constant = new Entry();
 218                                                 ConstRec con; .)
 219   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 220      AssignOp Constant<out con>              (. constant.value = con.value;
 221                                                 constant.type = con.type;
 222                                                 Table.Insert(constant); .)
 223   .
 224 
 225   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 226   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 227     | CharConst<out con.value>               (. con.type = Types.intType; .)
 228     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 229     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 230     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 231   .
 232 
 233   VarDeclarations<StackFrame frame>          (. int type; .)
 234   =  Type<out type>                          
 235      VarList<frame, type>
 236      WEAK ";"
 237   .
 238 
 239   Type<out int type>                         
 240   =   BasicType<out type>
 241        [ "[]"                                (. type++; .)
 242        ] .
 243 
 244   BasicType<out int type>                    (. type = Types.noType; .)
 245   =   "int"                                  (. type = Types.intType; .)
 246     | "bool"                                 (. type = Types.boolType; .)
 247   .
 248 
 249 
 250   VarList<StackFrame frame, int type>
 251   =  OneVar<frame, type>
 252      { WEAK "," OneVar<frame, type> }
 253   .
 254 
 255   OneVar<StackFrame frame, int type>         (. int expType;
 256                                                 Entry var = new Entry(); .)
 257   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 258                                                 var.type = type;
 259                                                 var.offset = frame.size;
 260                                                 frame.size++; .)
 261      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 262        Expression<out expType>               (. if (!Assignable(var.type, expType))
 263                                                   SemError("incompatible types in assignment");
 264                                                 CodeGen.Assign(var.type); .)
 265      ]                                       (. Table.Insert(var); .)
 266   .
 267 
 268 
 269   AssignmentOrCall                           (. int expType;
 270                                                 DesType des; .)
 271   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 272          identifier                          (. CodeGen.FrameHeader(); .)
 273          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 274       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 275                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 276          AssignOp
 277          Expression<out expType>             (. if (!Assignable(des.type, expType))
 278                                                 SemError("incompatible types in assignment");
 279                                                 CodeGen.Assign(des.type); .)
 280      ) WEAK ";"
 281   .
 282 
 283   Arguments<DesType des>                     (. int argCount = 0;
 284                                                 Entry fp = des.entry.firstParam; .)
 285   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 286        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 287        }
 288      ]                                       (. if (argCount != des.entry.nParams)
 289                                                   SemError("wrong number of arguments"); .)
 290   .
 291 
 292   OneArg<Entry fp>                           (. int argType; .)
 293   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 294                                                     SemError("argument type mismatch"); .)
 295      )
 296   .
 297   
 298   Designator<out DesType des>                (. string name;
 299                                                 int indexType; .)
 300   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 301                                                 if (!entry.declared)
 302                                                   SemError("undeclared identifier");
 303                                                 des = new DesType(entry);
 304                                                 if (entry.kind == Kinds.Var)
 305                                                   CodeGen.LoadAddress(entry); .)
 306      [     "["                               (. if (IsArray(des.type)) des.type--;
 307                                                 else SemError("unexpected subscript");
 308                                                 if (des.entry.kind != Kinds.Var)
 309                                                   SemError("unexpected subscript");
 310                                                 CodeGen.Dereference(); .)
 311               Expression<out indexType>      (. if (!IsArith(indexType))
 312                                                   SemError("invalid subscript type");
 313                                                 CodeGen.Index(); .)
 314 
 315            "]"
 316      ]
 317   .
 318 
 319   IfStatement<StackFrame frame>
 320                                              (. loop = true; Label falseLabel = new Label(!known); Label trueLabel = new Label(!known);.)
 321   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 322         Statement<frame>                      (. CodeGen.Branch(trueLabel);  falseLabel.Here(); .)
 323 		[ "else" Statement<frame>] 		     (. trueLabel.Here();  .)
 324   .
 325 
 326 
 327   WhileStatement<StackFrame frame>
 328                                              (. loop = true; Label loopExit  = new Label(!known);
 329                                                 Label loopStart = new Label(known); .)
 330   =  "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 331      Statement<frame>              	        (. CodeGen.Branch(loopStart);.)
 332                                                (.  loopExit.Here(); stoplabel.Here();.)
 333   .
 334   
 335  DoWhileStatement<StackFrame frame>
 336                                              (. loop = true; Label loopExit  = new Label(!known); 
 337 											  Label loopStart = new Label(known); .)
 338   = "do"  Statement<frame>             
 339   "while" "(" Condition ")"";"                (. CodeGen.BranchFalse(loopExit); CodeGen.Branch(loopStart);              	     
 340                                                 loopExit.Here(); stoplabel.Here(); .)
 341   .
 342 
 343 ForStatement<StackFrame frame>               (. string name;Entry labelb = new Entry();int count=1;
 344                                                 int expType; DesType des;Label loopstart  = new Label(!known); Label loopend  = new Label(!known); .)
 345   = "for" Ident<out name>                       (. Entry entry = Table.Find(name);
 346                                                 if (!entry.declared)
 347                                                   SemError("undeclared identifier");des = new DesType(entry);
 348                                                 if (entry.kind == Kinds.Var)
 349                                                   CodeGen.LoadAddress(entry); if (des.entry.kind != Kinds.Var)
 350                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 351    "in" "(" Expression <out expType>          (. if (!Assignable(des.type, expType))
 352                                                 SemError("incompatible types in assignment"); 
 353                                                 CodeGen.Assign(des.type); Label loopback  = new Label(known); 
 354 												CodeGen.LoadConstant(loopback.Address());CodeGen.StoreValue(labelb); CodeGen.Branch(loopstart); .)
 355   { "," (.CodeGen.LoadAddress(entry);count++; .)
 356     Expression  <out expType>              (.  if (!Assignable(des.type, expType))
 357                                                 SemError("incompatible types in assignment");
 358                                                 CodeGen.Assign(des.type); loopback  = new Label(known);
 359 												CodeGen.LoadConstant(loopback.Address());CodeGen.StoreValue(labelb);
 360 												CodeGen.Branch(loopstart); .) 
 361    } ")"                                        (.  CodeGen.Branch(loopend);loopstart.Here(); .)
 362    Statement<frame>                             (.  CodeGen.LoadValue(labelb); CodeGen.LoadConstant(6); CodeGen.addi();
 363 													CodeGen.ForBranch(); loopend.Here(); stoplabel.Here(); .)
 364    .   
 365            
 366   
 367   HaltStatement
 368  =   "halt"   				(.  CodeGen.LeaveProgram(); .)
 369 	[ stringLit (. CodeGen.WriteString(token.val);  CodeGen.LeaveProgram(); .) ]
 370      WEAK ";"
 371   .
 372 
 373   ReturnStatement              
 374   =  "return"				(. CodeGen.LeaveVoidFunction(); .)
 375     WEAK ";"
 376   .
 377 
 378   ReadStatement
 379   = (   "read"     "("   ReadList   ")"
 380       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 381     )
 382     WEAK ";"
 383   .
 384 
 385   ReadList
 386   = ReadElement { WEAK "," ReadElement }
 387   .
 388 
 389   ReadElement                                (. string str;
 390                                                 DesType des; .)
 391   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 392     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 393                                                   SemError("wrong kind of identifier");
 394                                                 switch (des.type) {
 395                                                   case Types.intType:
 396                                                   case Types.boolType:
 397                                                     CodeGen.Read(des.type); break;
 398                                                   default:
 399                                                     SemError("cannot read this type"); break;
 400                                                 } .)
 401   .
 402 
 403   WriteStatement
 404   = (   "write"     "("   WriteList {["+"] WriteList}   ")"     
 405       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 406     )
 407     WEAK ";"
 408   .
 409 
 410   WriteList
 411   = WriteElement { WEAK "," WriteElement }
 412   .
 413 
 414   WriteElement                               (. int expType;
 415                                                 string str; .)
 416   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 417     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType))
 418                                                   SemError("cannot write this type");
 419                                                 switch (expType) {
 420                                                   case Types.intType:
 421                                                   case Types.boolType:
 422                                                     CodeGen.Write(expType); break;
 423                                                   default:
 424                                                     break;
 425                                                 } .)
 426   .
 427 
 428   Condition                                  (. int type; .)
 429   =  Expression<out type>                    (. if (!IsBool(type))
 430                                                   SemError("Boolean expression needed"); .)
 431   .
 432 
 433   Expression<out int type>                   (. int type2;
 434                                                 int op;
 435                                                 bool comparable; .)
 436   =  AddExp<out type>
 437      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 438                                                   case CodeGen.ceq: case CodeGen.cne:
 439                                                     comparable = Compatible(type, type2);
 440                                                     break;
 441                                                   default:
 442                                                     comparable = IsArith(type) && IsArith(type2);
 443                                                     break;
 444                                                 }
 445                                                 if (!comparable)
 446                                                   SemError("incomparable operands");
 447                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 448      ]
 449   .
 450 
 451   AddExp<out int type>                       (. int type2;
 452                                                 int op;
 453                                                 Label shortcircuit = new Label(!known); .)
 454   =                                          (. type = Types.noType; .)
 455      (   "+" Term<out type>                  (. if (!IsArith(type))
 456                                                   SemError("arithmetic operand needed"); .)
 457        | "-" Term<out type>                  (. if (!IsArith(type))
 458                                                   SemError("arithmetic operand needed");
 459                                                 CodeGen.NegateInteger(); .)
 460        | Term<out type>
 461      )
 462      { AddOp<out op>                         (. if (op == CodeGen.or)
 463                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 464        Term<out type2>                       (. switch (op) {
 465                                                   case CodeGen.or:
 466                                                     if (!IsBool(type) || !IsBool(type2))
 467                                                       SemError("boolean operands needed");
 468                                                     type = Types.boolType;
 469                                                     break;
 470                                                   default:
 471                                                     if (!IsArith(type) || !IsArith(type2)) {
 472                                                       SemError("arithmetic operands needed");
 473                                                       type = Types.noType;
 474                                                     }
 475                                                     CodeGen.BinaryOp(op);
 476                                                     break;
 477                                                 } .)
 478      }                                       (. shortcircuit.Here(); .)
 479   .
 480 
 481   Term<out int type>                         (. int type2;
 482                                                 int op;
 483                                                 Label shortcircuit = new Label(!known); .)
 484   =  Factor<out type>
 485      { MulOp<out op>                         (. if (op == CodeGen.and)
 486                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 487        Factor<out type2>                     (. switch (op) {
 488                                                   case CodeGen.and:
 489                                                     if (!IsBool(type) || !IsBool(type2))
 490                                                       SemError("boolean operands needed");
 491                                                     type = Types.boolType;
 492                                                     break;
 493                                                   default:
 494                                                     if (!IsArith(type) || !IsArith(type2)) {
 495                                                       SemError("arithmetic operands needed");
 496                                                       type = Types.noType;
 497                                                     }
 498                                                     CodeGen.BinaryOp(op);
 499                                                     break;
 500                                                 } .)
 501      }                                       (. shortcircuit.Here(); .)
 502   .
 503 
 504   Factor<out int type>                       (. type = Types.noType;
 505                                                 int size;
 506                                                 DesType des;
 507                                                 ConstRec con; .)
 508   =    Designator<out des>                 (. type = des.type;
 509                                               switch (des.entry.kind) {
 510                                                   case Kinds.Var:
 511                                                     CodeGen.Dereference();
 512                                                     break;
 513                                                   case Kinds.Con:
 514                                                     CodeGen.LoadConstant(des.entry.value);
 515                                                     break;
 516                                                   default:
 517                                                     SemError("wrong kind of identifier");
 518                                                     break;
 519                                                 } .)
 520                                         
 521      | Constant<out con>                     (. type = con.type;
 522                                                 CodeGen.LoadConstant(con.value); .)
 523      | "new" BasicType<out type>             (. type++; .)
 524          "[" Expression<out size>            (. if (!IsArith(size))
 525                                                   SemError("array size must be integer");
 526                                                 CodeGen.Allocate(); .)
 527          "]"
 528      | "!" Factor<out type>                  (. if (!IsBool(type)) SemError("boolean operand needed");
 529                                                 else CodeGen.NegateBoolean();
 530                                                 type = Types.boolType; .)
 531      | "(" Expression<out type> ")"
 532   .
 533 
 534   AddOp<out int op>                          (. op = CodeGen.nop; .)
 535   =    "+"                                   (. op = CodeGen.add; .)
 536      | "-"                                   (. op = CodeGen.sub; .)
 537      | "||"                                  (. op = CodeGen.or;  .)
 538   .
 539 
 540   MulOp<out int op>                          (. op = CodeGen.nop; .)
 541   =    "*"                                   (. op = CodeGen.mul; .)
 542      | "/"                                   (. op = CodeGen.div; .)
 543      | "%"                                   (. op = CodeGen.rem; .)
 544      | "&&"                                  (. op = CodeGen.and; .)
 545   .
 546 
 547   RelOp<out int op>                          (. op = CodeGen.nop; .)
 548   =    "=="                                  (. op = CodeGen.ceq; .)
 549      | "!="                                  (. op = CodeGen.cne; .)
 550      | "<"                                   (. op = CodeGen.clt; .)
 551      | "<="                                  (. op = CodeGen.cle; .)
 552      | ">"                                   (. op = CodeGen.cgt; .)
 553      | ">="                                  (. op = CodeGen.cge; .)
 554   .
 555 
 556   AssignOp = "=" .
 557 
 558   Ident<out string name>
 559   =  identifier                              (. name = token.val; .)
 560   .
 561 
 562   StringConst<out string str>
 563   =  stringLit                               (. str = token.val;
 564                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 565   .
 566 
 567   CharConst<out int value>
 568   =  charLit                                 (. string str = token.val;
 569                                                 str = Unescape(str.Substring(1, str.Length - 2));
 570                                                 value = str[0]; .)
 571   .
 572 
 573   IntConst<out int value>
 574   =  number                                  (. try {
 575                                                   value = Convert.ToInt32(token.val);
 576                                                 } catch (Exception) {
 577                                                   value = 0; SemError("number out of range");
 578                                                 } .)
 579   .
 580 
 581 END Parva.
 582 

0 errors detected
6 warnings detected
